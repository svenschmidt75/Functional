QuickCheck Cheat Sheet
----------------------

Sven Schmidt
Feb. 26th, 2017




Load QuichCheck into instance og ghci:

:set -package QuickCheck
:set -package hspec
import Test.Quickcheck





Properties
==========


Generate functions to verify laws:
---------------------------------

spec :: Spec
spec = do
    describe "functor laws" $ do
        prop "composition" $ do
            prop_functorCompose

prop_functorCompose :: Gen QCP.Result
prop_functorCompose = do
    f <- arbitrary :: Gen (Int -> Int)
    g <- arbitrary :: Gen (Int -> Int)
    x <- arbitrary :: Gen (Identity Int)
    return $ if functorCompose f g x == True
    then succeeded
    else failed { QCP.reason = "stupid non-commutative addition" }


or

functorIdentity :: (Functor f, Eq (f a)) => f a -> Bool
functorIdentity f = fmap id f == f

functorCompose :: (Eq (f c), Functor f) => f a -> Fun a b -> Fun b c -> Bool
functorCompose x (Fun _ f) (Fun _ g) = (fmap (g . f) x) == (fmap g . fmap f $ x)

type IntToInt = Fun Int Int
type IntFC = Identity Int -> IntToInt -> IntToInt -> Bool

instance Arbitrary a => Arbitrary (Identity a) where
    arbitrary = do
        a <- arbitrary
        return $ Identity a

spec :: Spec
spec = do
    describe "functor laws" $ do
        prop "identity" $ do
            \x -> functorIdentity (x :: Identity Int)
        prop "composition 1" $ do
            functorCompose :: IntFC




Simple properties:
-----------------

import Test.QuickCheck.Property as QCP

spec :: Spec
spec = do
    describe "functor laws" $ do
        prop "1" $ do
            prop_commutativeAdd
        prop "2" $ do
            prop_commutativeAdd2

prop_commutativeAdd :: Gen QCP.Result
prop_commutativeAdd = do
  (x, y) <- arbitrary :: Gen (Int, Int)
  return $ if x + y == y + x
    then succeeded
    else failed { QCP.reason = "stupid non-commutative addition" }

prop_commutativeAdd2 :: Int -> Int -> Bool
prop_commutativeAdd2 x y = x + y == y + x




'prop "bla"'' is short-hand for 'it "bla" $ property $'



Monadic property testing:
------------------------

import Test.Hspec
import Test.Hspec.QuickCheck (prop)
import Test.QuickCheck (Property, quickCheck, (==>))
import Test.QuickCheck.Monadic (assert, monadicIO, run)

-- Add fmap, parentheses, and function composition to the expression
-- as needed for the expression to typecheck and produce the expected
-- result.

spec :: Spec
spec = do
    describe "Heavy Lifting" $ do
        prop "5" $ do
            prop5

prop5 :: Property
prop5 = monadicIO $ do
    let e = let ioi = readIO "1" :: IO Integer
                changed = (fmap read $ fmap ("123" ++) (fmap show ioi)) :: IO Integer
            in fmap (*3) changed
    result <- run $ e
    assert $ result == 3693



Restrict number of tests to run
===============================


=> modifyMaxSuccess (const 1) $ do

spec :: Spec
spec = do
    describe "verify laws" $ do
        modifyMaxSuccess (const 1) $ do
            prop "Sum Functor laws" $ do
                sumFunctorLawsProp
            prop "Sum Applicative laws" $ do
                sumApplicativeLawsProp
            prop "Sum Monad laws" $ do
                sumMonadLawsProp

sumFunctorLawsProp :: Property
sumFunctorLawsProp = monadicIO $ do
    -- result type is Test.QuickCheck.Monadic.PropertyM IO ()
    let trigger = undefined :: Sum String (Int, Int, Int)
    run $ quickBatch $ functor trigger




quickCheck :: Testable prop => prop -> IO ()



Generators
==========


Arbitrary
=========

class Arbitrary a where
    arbitrary :: Gen a


instance Arbitrary Point where
  arbitrary = do
    x <- arbitrary
    y <- arbitrary
    return (MkPoint x y)


Restrict randomly generated values with suchThat:

-- write Arbitrary instance for return type of function
-- generateImage :: (Int -> Int) -> Int -> Image, i.e.
-- Image
genImage :: Gen Image
genImage = do
    -- generate function
    f <- arbitrary
    -- restrict count
    count <- arbitrary `suchThat` (\n -> n > 0 && n < 10)
    return $ generateImage f count


choose
------

choose :: Random a => (a, a) -> Gen a

Generates a random element in the given inclusive range.


instance Arbitrary DT.Day where
    arbitrary = do
        year <- choose (1000, 2000)
        day <- choose (1, 31)
        month <- choose (1, 31)
        return $ DT.fromGregorian year month day


frequency
---------

frequency :: [(Int, Gen a)] -> Gen a

Chooses one of the given generators, with a weighted random distribution. The input list must be non-empty.

instance (Arbitrary a, Arbitrary b) => Arbitrary (Sum a b) where
    arbitrary = frequency [
                            (1, First <$> arbitrary)
                          , (1, Second <$> arbitrary)
                          ]


sized :: (Int -> Gen a) -> Gen a

instance Arbitrary LogFileSection where
    arbitrary = sized $ \n -> do
        -- We have to put sequence here, because
        -- [arbitrary | _ <- [1..n]] :: [Gen LogFileEntry], but we
        -- need Gen [LogFileEntry]!
        let logFileEntries = sequence [arbitrary | _ <- [1..n]]
        LogFileSection <$> arbitrary <*> logFileEntries


resize :: Int -> Gen a -> Gen a


Modifies a generator.
-> restricts the range of random data to generate



scale :: (Int -> Int) -> Gen a -> Gen a



elements :: [a] -> Gen a

Generates one of the given values. The input list must be non-empty.



generate :: Gen a -> IO a

Run a generator. The size passed to the generator is always 30; if you want another size then you should explicitly use resize.



sample :: Show a => Gen a -> IO ()

Generates some example values and prints them to stdout.



sample' :: Gen a -> IO [a] Source #

Generates some example values.





variant
-------

Modifies a generator, perturbs a generator.

variant :: Integral n => n -> Gen a -> Gen a



coarbitrary
-----------

Based on https://begriffs.com/posts/2017-01-14-design-use-quickcheck.html


The typeclass CoArbitrary is used to generate random functions.
Given f:: a -> b, a naive way to generate random functions could be to drop the
argument and return a random value. Unfortunately, that would give wrong results:

propFunc1 :: (Int -> Int) -> Int -> Bool
propFunc1 f x = (f . (+2)) x == (f . (*2)) x

These should generate different results, but if we always generate a random result,
while discarding the argument, this is generally not the case.

This is clearly wrong, hence we need a functional dependency between arguments and
result.

How is the achieved in QuichCheck?

Basically, Arbitrary (a -> b) is already defined:

instance (CoArbitrary a, Arbitrary b) => Arbitrary (a -> b) where
    arbitrary = ... :: Gen (a -> b)

Notice that (essentially)

    Gen (a -> b) = Int -> Rand -> a -> b
                 = a -> Int -> Rand -> b
                 = a -> Gen b

So, a function modifying a generator,

    a -> Gen b

can be transformed into a generator for functions,

    Gen (a -> b)

arbitrary :: Gen (a -> b), so in order to defined Gen (a -> b), we need to defined
a functions a -> Gen b. How can we do that?
Before we answer that, there is a related function, that has type signature

    coarbitrary :: a -> Gen b -> Gen b

where

    class CoArbitrary a where
        coarbitrary :: a -> Gen b -> Gen b

With this,

    instance (CoArbitrary a, Arbitrary b) => Arbitrary (a -> b) where
        arbitrary = promote (\a -> coarbitrary a arbitrary) :: Gen (a -> b)

where

    promote :: (a -> Gen b) -> Gen (a -> b)

So, in order to make this work, we need to define what coarbitrary means
for each function argument, i.e. we have to implement the CoArbitary for
each function argument type. To do this, we use

    variant :: Int -> Gen a -> Gen a

Notice:

    coarbitrary :: a   -> Gen b -> Gen b
        variant :: Int -> Gen b -> Gen b

For example:

    instance CoArbitrary Bool where
        coarbitrary b = if b then (variant 0) else (variant 1)

Variant basically allows us to perturb a generator to yield a new generator
of the same type. Variant deterministically alters the stream of pseudo-random
numbers feeding the generator, so the magic sauce is in variant.

Deterministically, because we want to generate the same results for the same input!
Randomly generating return values does not allow us to do so.

This is basically what it means to have a functional dependency between input
arguments and return value.
