{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"log",
				"exampleLogFileSection ∷ String\tMain"
			],
			[
				"exa",
				"exampleLogFileSection ∷ String\tMain"
			],
			[
				"LogF",
				"LogFileSection \tLib"
			],
			[
				"tot",
				"totalActivityDurationPerDay ∷ LogFileSection → DT.NominalDiffTime\tLib"
			],
			[
				"parse",
				"parseLogFileSection ∷ Parser LogFileSection\tLib"
			],
			[
				"ac",
				"activitiesPerLogFile ∷ LogFile → [Activity]\tLib"
			],
			[
				"acti",
				"activityLogFileSection ∷ Activity → LogFileSection → DT.NominalDiffTime\tLib"
			],
			[
				"Lof",
				"LogFileEntry \tLib"
			],
			[
				"LogFile",
				"LogFileSection \tLib"
			],
			[
				"parseLo",
				"parseLogFile"
			],
			[
				"logFile",
				"LogFileSection"
			],
			[
				"pars",
				"skipComment ∷ Parser ()\tLib"
			],
			[
				"skip",
				"skipComments ∷ Parser ()\tLib"
			],
			[
				"exam",
				"exampleLogFileSection ∷ [Char]\tLogFileSpec"
			],
			[
				"parseLog",
				"parseLogFileSection ∷ Parser LogFileSection\tLib"
			],
			[
				"par",
				"parse2Digits"
			],
			[
				"dig",
				"digitToInt"
			],
			[
				"p",
				"parseYear"
			],
			[
				"exp",
				"expectedTime"
			],
			[
				"ut",
				"utctDay"
			],
			[
				"LogFi",
				"LogFileEntry \tLib"
			],
			[
				"num",
				"numberOrStringParser"
			],
			[
				"st",
				"stringParser"
			],
			[
				"nu",
				"numberParser"
			],
			[
				"pa",
				"parsePreRelease"
			],
			[
				"Num",
				"NumberOrString \tLib"
			],
			[
				"edge",
				"edgeComparator :: Edge -> Edge -> Bool\tGraph"
			],
			[
				"rep",
				"replace' :: Eq a => (a -> a -> Bool) -> a -> a -> [a] -> [a]\tHelper"
			],
			[
				"put",
				"putStrLn :: String -> IO ()\tPrelude"
			],
			[
				"get",
				"getUncoloredEdges :: Vertex -> Graph -> [Edge]\tLib"
			],
			[
				"gra",
				"Graph \tGraph"
			],
			[
				"repl",
				"replace :: Eq a => a -> a -> [a] -> [a]\tHelper"
			],
			[
				"ne",
				"neighbors"
			],
			[
				"Gra",
				"Graph"
			],
			[
				"ha",
				"hasEdge"
			],
			[
				"has",
				"hasVertex"
			],
			[
				"v",
				"vertices"
			],
			[
				"vowels",
				"vowelsInString"
			],
			[
				"co",
				"countVowels"
			],
			[
				"isP",
				"isPunctuation :: Char -> Bool\tData.Char"
			],
			[
				"cre",
				"createMultiplicityMap2 :: [String] -> Map.Map String Int\tLib"
			],
			[
				"max",
				"maximumBy :: Foldable t => (a -> a -> Ordering) -> t a -> a\tData.List"
			],
			[
				"fin",
				"fingerTaps"
			],
			[
				"mu",
				"multiplicityMap"
			],
			[
				"from",
				"fromList :: Ord k => [(k, a)] -> Map k a\tData.Map"
			],
			[
				"fi",
				"fingerTaps"
			],
			[
				"con",
				"convertToCapital"
			],
			[
				"a",
				"accum"
			],
			[
				"fold",
				"foldTree"
			],
			[
				"ins",
				"insert"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "{-# LANGUAGE QuasiQuotes #-}\nmodule LogFileSpec (spec) where\n\nimport qualified Data.Time as DT\nimport qualified Text.Trifecta as TF\nimport Text.RawString.QQ\n\nimport Test.Hspec\nimport Test.QuickCheck.Monadic (monadicIO, run)\n\n\nimport Lib\n    ( LogFileEntry (..)\n    , LogFileSection (..)\n    , LogFile (..)\n    , parseComments\n    , parseComment\n    , parseTime\n    , parseLogFileEntry\n    , parseSectionStart\n    , parseLogFileSection\n    , parseLogFile\n    , activityLogFileSection\n    , activityDurationLogFile\n    , activitiesPerLogFileSection\n    , totalActivityDurationPerDay\n    )\n\nexampleLog :: String\nexampleLog = [r|\n-- wheee a comment\n# 2025-02-05\n08:00 Breakfast\n09:00 Sanitizing moisture collector\n11:00 Exercising in high-grav gym\n12:00 Lunch\n13:00 Programming\n17:00 Commuting home in rover\n17:30 R&R\n19:00 Dinner\n21:00 Shower\n21:15 Read\n22:00 Sleep\n# 2025-02-07 -- dates not nececessarily sequential\n08:00 Breakfast -- should I try skippin bfast?\n09:00 Bumped head, passed out\n13:36 Wake up, headache\n13:37 Go to medbay\n13:40 Patch self up\n13:45 Commute home for rest\n14:15 Read\n21:00 Dinner\n21:15 Read\n22:00 Sleep\n|]\n\nexampleLogFileSection :: String\nexampleLogFileSection = [r|\n# 2025-02-07 -- dates not nececessarily sequential\n08:00 Breakfast -- should I try skippin bfast?\n09:00 Bumped head, passed out\n13:36 Wake up, headache\n13:37 Go to medbay\n13:40 Patch self up\n13:45 Commute home for rest\n14:15 Read\n21:00 Dinner\n21:15 Read\n22:00 Sleep\n|]\n\n\nspec :: Spec\nspec = do\n    describe \"parseComment\" $ do\n        it \"Test 1\" $ do\n            let result = TF.parseString parseComment mempty \"-- abc\"\n            -- TF.Result does not have an eq instance, so need to\n            -- manually unpack\n            case result of\n                TF.Success _ -> True `shouldBe` True\n                -- fail this test...\n                TF.Failure err -> show err `shouldBe` \"False\"\n        it \"leading newline\" $ do\n            let result = TF.parseString parseComment mempty \"\\n-- abc\"\n            -- TF.Result does not have an eq instance, so need to\n            -- manually unpack\n            case result of\n                TF.Success _ -> True `shouldBe` True\n                -- fail this test...\n                TF.Failure err -> show err `shouldBe` \"False\"\n        it \"leading newline\" $ do\n            let result = TF.parseString parseComments mempty \"\\n-- abc\"\n            -- TF.Result does not have an eq instance, so need to\n            -- manually unpack\n            case result of\n                TF.Success _ -> True `shouldBe` True\n                -- fail this test...\n                TF.Failure err -> show err `shouldBe` \"False\"\n    describe \"parseTime\" $ do\n        it \"Test 1\" $ do\n            let result = TF.parseString parseTime mempty \"08:00\"\n            -- TF.Result does not have an eq instance, so need to\n            -- manually unpack\n            case result of\n                TF.Success (DT.UTCTime utctDay utctDayTime)\n                    -> (DT.toGregorian utctDay, utctDayTime) `shouldBe` (expectedDay, expectedTime)\n                        where\n                            expectedDay  = (2000, 1, 1)\n                            expectedTime = 8 * 3600\n                -- fail this test...\n                TF.Failure err   -> show err `shouldBe` \"False\"\n        it \"Test 2\" $ do\n            let result = TF.parseString parseTime mempty \"21:15\"\n            -- TF.Result does not have an eq instance, so need to\n            -- manually unpack\n            case result of\n                TF.Success (DT.UTCTime utctDay utctDayTime)\n                    -> (DT.toGregorian utctDay, utctDayTime) `shouldBe` (expectedDay, expectedTime)\n                        where\n                            expectedDay  = (2000, 1, 1)\n                            expectedTime = 21 * 3600 + 15 * 60\n                -- fail this test...\n                TF.Failure err   -> show err `shouldBe` \"False\"\n    describe \"parseLogFileEntry\" $ do\n        it \"Test 1\" $ do\n            let result = TF.parseString parseLogFileEntry mempty \"08:00 Breakfast\\n\"\n            -- TF.Result does not have an eq instance, so need to\n            -- manually unpack\n            case result of\n                TF.Success (LogFileEntry time activity)\n                    -> (time, activity) `shouldBe` (expectedTime, expectedActivity)\n                        where\n                            expectedTime = (DT.UTCTime (DT.fromGregorian 2000 1 1) (DT.secondsToDiffTime $ 8 * 3600))\n                            expectedActivity = \"Breakfast\"\n                -- fail this test...\n                TF.Failure err   -> show err `shouldBe` \"False\"\n        it \"Test 2\" $ do\n            let result = TF.parseString parseLogFileEntry mempty \"08:00 Breakfast -- with comment\"\n            -- TF.Result does not have an eq instance, so need to\n            -- manually unpack\n            case result of\n                TF.Success (LogFileEntry time activity)\n                    -> (time, activity) `shouldBe` (expectedTime, expectedActivity)\n                        where\n                            expectedTime = (DT.UTCTime (DT.fromGregorian 2000 1 1) (DT.secondsToDiffTime $ 8 * 3600))\n                            expectedActivity = \"Breakfast\"\n                -- fail this test...\n                TF.Failure err   -> show err `shouldBe` \"False\"\n    describe \"parseSectionStart\" $ do\n        it \"Test 1\" $ do\n            let result = TF.parseString parseSectionStart mempty \"# 2025-02-05\"\n            -- TF.Result does not have an eq instance, so need to\n            -- manually unpack\n            case result of\n                TF.Success day\n                    -> day `shouldBe` expectedDay\n                        where\n                            expectedDay = DT.fromGregorian 2025 2 5\n                -- fail this test...\n                TF.Failure err   -> show err `shouldBe` \"False\"\n        it \"Test 2\" $ do\n            let result = TF.parseString parseSectionStart mempty \"# 2025-02-07 -- dates not nececessarily sequential\"\n            -- TF.Result does not have an eq instance, so need to\n            -- manually unpack\n            case result of\n                TF.Success day\n                    -> day `shouldBe` expectedDay\n                        where\n                            expectedDay = DT.fromGregorian 2025 2 7\n                -- fail this test...\n                TF.Failure err   -> show err `shouldBe` \"False\"\n\n    describe \"parseLogFileSection\" $ do\n        it \"Test 1\" $ do\n            let result = TF.parseString parseLogFileSection mempty exampleLogFileSection\n            -- TF.Result does not have an eq instance, so need to\n            -- manually unpack\n            case result of\n                TF.Success _ -> True `shouldBe` True\n                    -- -> day `shouldBe` expectedDay\n                    --     where\n                    --         expectedDay = DT.fromGregorian 2025 2 5\n                -- fail this test...\n                TF.Failure err   -> show err `shouldBe` \"False\"\n    describe \"parseLogFile\" $ do\n        it \"Test 1\" $ do\n            let result = TF.parseString parseLogFile mempty exampleLog\n            -- TF.Result does not have an eq instance, so need to\n            -- manually unpack\n            case result of\n                TF.Success (LogFile logFileSections) -> (length logFileSections) `shouldBe` 2\n                    -- -> day `shouldBe` expectedDay\n                    --     where\n                    --         expectedDay = DT.fromGregorian 2025 2 5\n                -- fail this test...\n                TF.Failure err   -> show err `shouldBe` \"False\"\n    describe \"activityLogFileSection\" $ do\n        it \"Test 1\" $ do\n            let lfe1 = LogFileEntry (DT.UTCTime (DT.fromGregorian 2017 1 1) 61) \"Breakfast\"\n            let lfe2 = LogFileEntry (DT.UTCTime (DT.fromGregorian 2017 1 1) 120) \"Reading\"\n            let lfs = LogFileSection (DT.fromGregorian 2017 1 1) [lfe1, lfe2]\n            let result = activityLogFileSection \"Breakfast\" lfs\n            result `shouldBe` 59\n        it \"Test 2 - Breakfast\" $ do\n            let result = TF.parseString parseLogFileSection mempty exampleLogFileSection\n            case result of\n                TF.Success lfs -> do\n                    -- Breakfast for 1hr = 60*60=3600 seconds\n                    let duration = activityLogFileSection \"Breakfast\" lfs\n                    duration `shouldBe` 60*60\n                TF.Failure err   -> show err `shouldBe` \"False\"\n        it \"Test 3 - Read\" $ do\n            let result = TF.parseString parseLogFileSection mempty exampleLogFileSection\n            case result of\n                TF.Success lfs -> do\n                    let duration = activityLogFileSection \"Read\" lfs\n                    -- read for 7.5hr = 7.5*60*60=27000 seconds\n                    duration `shouldBe` 7.5*60*60\n                TF.Failure err   -> show err `shouldBe` \"False\"\n--         prop \"5\" $ do\n-- --            modifyMaxSuccess (const 1) $ do\n--                 printLogFileSectionProp\n--         prop \"6\" $ do\n-- --            modifyMaxSuccess (const 1) $ do\n--                 printLogFileProp\n    describe \"activityDurationLogFile\" $ do\n        it \"Test 1 - Breakfast\" $ do\n            let result = TF.parseString parseLogFile mempty exampleLog\n            case result of\n                TF.Success lfs -> do\n                    -- Breakfast for 1hr = 60*60=3600 seconds at two days\n                    let duration = activityDurationLogFile \"Breakfast\" lfs\n                    duration `shouldBe` 2*60*60\n                TF.Failure err   -> show err `shouldBe` \"False\"\n        it \"Test 1 - Dinner\" $ do\n            let result = TF.parseString parseLogFile mempty exampleLog\n            case result of\n                TF.Success lfs -> do\n                    -- Dinner for 2hr = 2*60*60 seconds, and 15min\n                    let duration = activityDurationLogFile \"Dinner\" lfs\n                    duration `shouldBe` 2*60*60+15*60\n                TF.Failure err   -> show err `shouldBe` \"False\"\n    describe \"activitiesPerLogFileSection\" $ do\n        it \"Test 1\" $ do\n            let parseResult = TF.parseString parseLogFileSection mempty exampleLogFileSection\n            let result = (length . activitiesPerLogFileSection) <$> parseResult\n            case result of\n                TF.Success count -> do\n                    count `shouldBe` 9\n                TF.Failure err   -> show err `shouldBe` \"False\"\n    describe \"totalActivityDurationPerDay\" $ do\n        it \"Test 1\" $ do\n            let parseResult = TF.parseString parseLogFileSection mempty exampleLogFileSection\n            let result = totalActivityDurationPerDay <$> parseResult\n            case result of\n                TF.Success count -> do\n                    -- 14hr total activity\n                    count `shouldBe` (14*60*60)\n                TF.Failure err   -> show err `shouldBe` \"False\"\n\n-- Write some output while running tests\nprintLogFileSectionProp :: Property\nprintLogFileSectionProp = monadicIO $ do\n    let result = TF.parseString parseLogFileSection mempty exampleLogFileSection\n    run $ case result of\n        TF.Success lfs -> print lfs\n        TF.Failure err   -> return ()\n\nprintLogFileProp :: Property\nprintLogFileProp = monadicIO $ do\n    let result = TF.parseString parseLogFile mempty exampleLog\n    run $ case result of\n        TF.Success lfs -> print lfs\n        TF.Failure err   -> return ()\n",
			"file": "test/LogFileSpec.hs",
			"file_size": 11509,
			"file_write_time": 131295755434411484,
			"settings":
			{
				"buffer_size": 11447,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Lib.hs",
			"settings":
			{
				"buffer_size": 5176,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "app/Main.hs",
			"settings":
			{
				"buffer_size": 1401,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 204.0,
		"last_filter": "Haskell: Go",
		"selected_items":
		[
			[
				"Haskell: Go",
				"SublimeHaskell: Go to declaration"
			],
			[
				"Pack",
				"Package Control: Upgrade Package"
			],
			[
				"Haskell",
				"Set Syntax: Haskell Repl"
			],
			[
				"view",
				"View: Toggle Menu"
			]
		],
		"width": 471.0
	},
	"console":
	{
		"height": 305.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/svenschmidt75/Develop/Functional/Haskell/HaskellProgramming/Chapter24/LogFile",
		"/home/svenschmidt75/Develop/Functional/Haskell/HaskellProgramming/Chapter24/LogFile/app",
		"/home/svenschmidt75/Develop/Functional/Haskell/HaskellProgramming/Chapter24/LogFile/src",
		"/home/svenschmidt75/Develop/Functional/Haskell/HaskellProgramming/Chapter24/LogFile/test"
	],
	"file_history":
	[
		"/home/svenschmidt75/Develop/Functional/Haskell/HaskellProgramming/Chapter24/LogFile/LogFile.cabal",
		"/home/svenschmidt75/.config/sublime-text-3/Packages/User/SublimeHaskell.sublime-settings",
		"/home/svenschmidt75/Develop/Functional/Haskell/HaskellProgramming/Chapter24/LogFile/stack.yaml",
		"/home/svenschmidt75/Develop/Functional/Haskell/HaskellProgramming/Chapter24/SemVer/test/SemVerSpec.hs",
		"/home/svenschmidt75/Develop/Functional/Haskell/HaskellProgramming/Chapter24/SemVer/SemVer.cabal",
		"/home/svenschmidt75/Develop/Functional/Haskell/HaskellProgramming/Chapter24/ParserExample/ParserExample.cabal",
		"/home/svenschmidt75/.config/sublime-text-3/Packages/SublimeHaskell/Keymaps/Default.sublime-keymap",
		"/home/svenschmidt75/.config/sublime-text-3/Packages/User/Default.sublime-keymap",
		"/home/svenschmidt75/Develop/Functional/Haskell/Playground/DasHausVomNikolaus/test/LibSpec.hs",
		"/home/svenschmidt75/Develop/Functional/Haskell/Playground/DasHausVomNikolaus/test/HelperSpec.hs",
		"/home/svenschmidt75/Develop/Functional/Haskell/Playground/DasHausVomNikolaus/test/GraphSpec.hs",
		"/home/svenschmidt75/Develop/Functional/Haskell/Playground/DasHausVomNikolaus/src/Lib.hs",
		"/home/svenschmidt75/.config/sublime-text-3/Packages/SublimeHaskell/hsdev.py",
		"/home/svenschmidt75/Develop/Functional/Haskell/Playground/DasHausVomNikolaus/app/Main.hs",
		"/home/svenschmidt75/Develop/Functional/Haskell/Playground/DasHausVomNikolaus/DasHausVomNikolaus.cabal",
		"/home/svenschmidt75/Develop/Functional/Haskell/Playground/DasHausVomNikolaus/src/helper.hs",
		"/home/svenschmidt75/.config/sublime-text-3/Packages/User/Default (Linux).sublime-keymap",
		"/home/svenschmidt75/.config/sublime-text-3/Packages/Default/Default (Linux).sublime-keymap",
		"/home/svenschmidt75/Develop/Functional/Haskell/HaskellProgramming/Chapter12/StringProcessing125/StringProcessing125.cabal",
		"/home/svenschmidt75/Develop/various/DasHausVomNikolaus/DasHausVomNikolaus/main.cpp",
		"/home/svenschmidt75/Develop/Functional/Haskell/Playground/DasHausVomNikolaus/test/Spec.hs",
		"/home/svenschmidt75/Develop/Functional/Haskell/Playground/DasHausVomNikolaus/GraphSpec.hs",
		"/home/svenschmidt75/Develop/Functional/Haskell/HaskellProgramming/Chapter12/StringProcessing125/test/StringProcessingSpec.hs",
		"/home/svenschmidt75/Develop/Functional/Haskell/Playground/DasHausVomNikolaus/test/SpecGraph.hs",
		"/home/svenschmidt75/Develop/Functional/Haskell/HaskellProgramming/Chapter12/StringProcessing125/src/Lib.hs",
		"/home/svenschmidt75/Develop/Functional/Haskell/HaskellProgramming/Chapter12/StringProcessing125/test/Spec.hs",
		"/home/svenschmidt75/.config/sublime-text-3/Packages/User/Preferences.sublime-settings",
		"/home/svenschmidt75/Develop/Functional/Haskell/HaskellProgramming/Chapter12/StringProcessing125/app/Main.hs",
		"/home/svenschmidt75/Develop/Functional/Haskell/HaskellProgramming/Chapter11/BinaryTree/test/InsertSpec.hs",
		"/home/svenschmidt75/Develop/Functional/Haskell/HaskellProgramming/Chapter11/HuttonsRazor/test/HuttonsRazorSpec.hs",
		"/home/svenschmidt75/Develop/Functional/Haskell/HaskellProgramming/Chapter11/BinaryTree/BinaryTree.cabal",
		"/home/svenschmidt75/Develop/Functional/Haskell/HaskellProgramming/Chapter11/BinaryTree/test/Spec.hs",
		"/home/svenschmidt75/Develop/Functional/Haskell/HaskellProgramming/Chapter11/BinaryTree/src/Lib.hs",
		"/home/svenschmidt75/Develop/Functional/Haskell/HaskellProgramming/Chapter11/HuttonsRazor/src/Lib.hs",
		"/home/svenschmidt75/Develop/Preferences.sublime-settings.txt",
		"/home/svenschmidt75/Develop/Functional/Haskell/HaskellProgramming/Chapter11/HuttonsRazor/HuttonsRazor.cabal",
		"/home/svenschmidt75/Develop/Functional/Haskell/HaskellProgramming/Chapter11/HuttonsRazor/app/Main.hs",
		"/home/svenschmidt75/Develop/Functional/Haskell/HaskellProgramming/Chapter11/HuttonsRazor/test/Spec.hs",
		"/home/svenschmidt75/Develop/Functional/Haskell/HaskellProgramming/Chapter11/Phone/Phone.cabal",
		"/home/svenschmidt75/Develop/Functional/Haskell/Playground/MaximumTutle/src/Lib.hs",
		"/home/svenschmidt75/Develop/Functional/Haskell/HaskellProgramming/Chapter11/Phone/src/Lib.hs",
		"/home/svenschmidt75/Develop/Functional/Haskell/HaskellProgramming/Chapter11/Phone/app/Main.hs",
		"/home/svenschmidt75/Develop/Functional/Haskell/HaskellProgramming/Chapter11/Phone/.gitignore",
		"/home/svenschmidt75/.config/sublime-text-3/Packages/SublimeHaskell/Settings/SublimeHaskell.sublime-settings",
		"/home/svenschmidt75/Downloads/Logfile.txt",
		"/home/svenschmidt75/Develop/Functional/Haskell/Playground/Foldr/Foldr.hs",
		"/home/svenschmidt75/.config/sublime-text-3/Packages/Default/Preferences.sublime-settings",
		"/home/svenschmidt75/Develop/Functional/.gitignore",
		"/home/svenschmidt75/Develop/Functional/F#/FizzBuzz/.gitignore",
		"/home/svenschmidt75/Develop/Functional/Haskell/HaskellProgramming/Chapter11/BinaryTree/test/InsertTests.hs",
		"/home/svenschmidt75/Develop/Functional/Haskell/SerializeTo/SerializeTo.cabal",
		"/home/svenschmidt75/Develop/Functional/Haskell/SerializeTo/stack.yaml",
		"/home/svenschmidt75/Develop/Functional/Haskell/SerializeTo/src/Main.hs",
		"/home/svenschmidt75/Develop/Functional/Haskell/SerializeTo/lib/Parser.hs",
		"/home/svenschmidt75/Develop/Functional/Haskell/SerializeTo/test-suite/Spec.hs",
		"/usr/bin/subl",
		"/home/svenschmidt75/Develop/Functional/Haskell/Playground/FirstMaybe/src/Lib.hs",
		"/home/svenschmidt75/Develop/Functional/Haskell/SerializeTo/test-suite/ParserSpec.hs",
		"/opt/sublime_text/sublime_text"
	],
	"find":
	{
		"height": 23.0
	},
	"find_in_files":
	{
		"height": 90.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"activityLogFile",
			"prop6",
			"prop5",
			"Dinner",
			"exampleLogFileSection",
			"parseActivity",
			"parseUntilEOL",
			"result",
			"entries",
			"z",
			"duration",
			"parseLogFileEntry",
			"pComment",
			"skipComment",
			"skipComments",
			"skipComment",
			"skipComments",
			"i",
			"                    it \"getEdge - no such edge\" $ do\n            let graph = Graph [Vertex 1, Vertex 2, Vertex 3] [Edge (Vertex 1) (Vertex 2) 0]\n            getEdge (Edge (Vertex 1) (Vertex 3) 0) graph `shouldBe` Nothing",
			"            addVertex (Vertex 1) isGraph `shouldBe` expectedGraph\n            addVertex (Vertex 2) isGraph `shouldBe` expectedGraph\n",
			"addVertex",
			"hasEdge",
			"hasVertex"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "test/LogFileSpec.hs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11447,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/SublimeHaskell/Syntaxes/Haskell-SublimeHaskell.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "src/Lib.hs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5176,
						"regions":
						{
						},
						"selection":
						[
							[
								841,
								841
							]
						],
						"settings":
						{
							"syntax": "Packages/SublimeHaskell/Syntaxes/Haskell-SublimeHaskell.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 540.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "app/Main.hs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1401,
						"regions":
						{
						},
						"selection":
						[
							[
								168,
								168
							]
						],
						"settings":
						{
							"syntax": "Packages/SublimeHaskell/Syntaxes/Haskell-SublimeHaskell.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 266.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.sublime_haskell_build_log_panel":
	{
		"height": 100.0
	},
	"output.sublime_haskell_output_panel":
	{
		"height": 425.0
	},
	"output.sublime_haskell_symbol_info_panel":
	{
		"height": 237.0
	},
	"pinned_build_system": "",
	"project": "untitled.sublime-project",
	"replace":
	{
		"height": 42.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Develop/Functional/Haskell/HaskellProgramming/Chapter24/Base10Number/untitled.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 249.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
